#!/usr/bin/env bash

. ./garudrecon.cfg


if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi


showhelp(){
    banner
    echo -e "${green}TARGET OPTIONS${reset}"
    echo -e "   -d, --domain        Single Target domain (domain.com)"
    echo -e ""
    echo -e "${green}OPTIONS${reset}"
    echo -e "   -f, --fullscan      All - Perform all checks and exploitations"
    echo -e "   -p, --passive       Passive - Performs only passive steps"
    echo -e "   -a, --active        Active - Performs only active steps"
    echo -e "   -s, --subtakeover   Subtakeover - Performs only subtakeover steps"
    echo -e "   -i, --enumips       Enumips - Performs only enumips steps"
    echo -e "   -P, --portscan      Portscan - Performs only portscan steps"
    echo -e "   -S, --subfilter     Portscan - Performs only portscan steps"
    echo -e "   -v, --visualrecon   Portscan - Performs only portscan steps"
    echo -e "   -c, --crawl         Portscan - Performs only portscan steps"
    echo -e "   -g, --gfurl         Portscan - Performs only portscan steps"
    echo -e "   -w, --wafchecks     Portscan - Performs only portscan steps"
    echo -e "   -n, --nuclscan      Portscan - Performs only portscan steps"
    echo -e "   -j, --jschecks      Portscan - Performs only portscan steps"
    echo -e "   -W, --wordlistgen   Portscan - Performs only portscan steps"
    echo -e ""
    echo -e "${green}GENERAL OPTIONS${reset}"
    echo -e "   -o, --output        Define output folder"
    echo -e "   -h, --help          Help - Show this help"
    echo -e ""
    echo -e "${green}Optional Flags: ${reset}"
    echo -e "   -s, --silent                Hide output in the terminal             ${yellow}Default: False${reset}"
    echo -e "   -j, --json                  Store output in a single json file      ${yellow}Default: False${reset}"
    echo -e ""
    echo -e "${green}MODE OPTIONS${reset}"
    echo -e "   -or                Performs Osint and Recon"
    echo -e "   -r                 Masshunt openredirect"
    echo -e ""
    echo -e "${green}MASS HUNT VULNERABILITIES OPTIONS${reset}"
    echo -e "   -mx                Performs Masshunt xss"
    echo -e "   -mp                Performs Masshunt openredirect"
    echo -e ""
    echo -e "${green}USAGE EXAMPLES${reset}"
    echo -e "   ${blue}Passive subdomain scanning:${reset}"
    echo -e "   $0 -d example.com -p"
    echo -e ""
    echo -e "   ${blue}Active subdomain scanning:${reset}"
    echo -e "   $0 -d example.com -a"
    echo -e ""
}
   

# Recon Directory Path
mkdir -p domain=$1
mkdir -p $domain/osint-info
mkdir -p $domain/subdomain
mkdir -p $domain/ips
mkdir -p $domain/subdomain-takeover
mkdir -p $domain/ports
mkdir -p $domain/alive-subdomain
mkdir -p $domain/visual-recon
mkdir -p $domain/content-discovery
mkdir -p $domain/parameters
mkdir -p $domain/js-files
mkdir -p $domain/github
mkdir -p $domain/wafchecks
mkdir -p $domain/gf-patterns
mkdir -p $domain/vulnerabilities
mkdir -p $domain/nuclei
mkdir -p $domain/cms-vulnerabilities
mkdir -p $domain/buckets
mkdir -p $domain/technologies


###############################################################################################################
############################################### SUBDOMAINS ####################################################
###############################################################################################################

sub_passive(){
    assetfinder --subs-only $domain | anew -q ./$domain/subdomain/assetfinder.txt
    subfinder -silent -d $domain -all -t $threads | anew -q ./$domain/subdomain/subfinder.txt
    findomain -t $domain -u ./$domain/subdomain/findomain.txt
    sublist3r -d $domain -t $threads -v -o ./$domain/subdomain/sublist3r.txt
    amass enum -passive -d $domain -o ./$domain/subdomain/amass.txt
    # sudomy -d $domain --all | tee ./$domain/subdomain/sudomy.txt
    waybackurls $domain | unfurl -u domains | anew -q ./$domain/subdomain/waybackurls.txt
    knockpy $domain -th $threads --no-http-code 404 500 530 -o ./$domain/subdomain/knock_result
    subdog -d $domain -o ./$domain/subdomain/subdog.txt
    python3 ~/tools/github-subdomains.py -t $GITHUB_API_TOKEN -d $domain | anew -q ./$domain/subdomain/github.txt
}

sub_crt(){
    ctfr -d $domain | unfurl domains | anew -q ./$domain/subdomain/ctfr.txt  
}

subactive(){
    ffuf -w $fuzzdb_wordlists -u https://FUZZ.$domain -t $threads -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -v | grep "| URL |" | awk '{print $4}' | sed 's/^http[s]:\/\///g' | anew -q ./$domain/subdomain/ffuf.txt
    gobuster dns -d $domain -z -q -t $threads -w $gobuster_wordlists | awk '{print $2}' | anew -q ./$domain/subdomain/gobuster.txt
    amass enum  -src -ip -brute -min-for-recursive 2 -d $domain -o ./$domain/subdomain/amass_passive.txt
    # chaos -d $domain
}


combinesub(){
    cat ./$domain/subdomain/*.txt | anew -q ./$domain/subdomain/all_subdomain.txt
}


sub_dns(){
    cat ./$domain/subdomain/all_subdomain.txt | dnsx -r $RESOLVERS_TRUSTED -a -aaaa -cname -ns -ptr -mx -soa -silent -retry 3 -json -o subdomains/subdomains_dnsregs.json
    cat subdomains/subdomains_dnsregs.json | jq -r 'try .a[], try .aaaa[], try .cname[], try .ns[], try .ptr[], try .mx[], try .soa[]' | grep ".$domain$" | anew -q dnsx_dns_subdomains.txt

    puredns resolve ./$domain/subdomain/dnsx_dns_subdomains.txt -r $DNSVALIDATOR_RESOLVERS | anew -q ./$domain/subdomain/dnsx_resolve_subdomains.txt
}


sub_brute(){
    # Dns Bruteforcing
    puredns bruteforce $ASSETNOTE_DNS_WORDLIST $domain -r $DNSVALIDATOR_RESOLVERS | anew -q ./$domain/subdomain/puredns_brute_subdomain.txt
    puredns resolve ./$domain/subdomain/puredns_brute_subdomain.txt -r $DNSVALIDATOR_RESOLVERS | anew -q ./$domain/subdomain/puredns_resolve_subdomain.txt

    # Removing Unnecassery files
    rm -rf ./$domain/subdomain/gotator_subdomains.txt
}

sub_scraping(){
    keydomain=${domain%%.*}
    gospider -S ./$domain/alive-subdomain/all_alive.txt --js --subs -t $GOSPIDER_THREADS -c 10 -u -d 3 --sitemap --robots -w -r | anew -q ./$domain/content-discovery/gospider_urls.txt
    cat ./$domain/content-discovery/gospider_urls.txt | grep -Eo 'https?://[^ ]+' | sed 's/]$//' | unfurl -u domains | grep "$keydomain" | anew -q ./$domain/subdomain/gospider_subdomains.txt
    puredns resolve ./$domain/subdomain/gospider_subdomains.txt -r $DNSVALIDATOR_RESOLVERS | anew -q ./$domain/subdomain/gospider_resolve_subdomains.txt

}

sub_permut(){
    # Permutation/Alterations
    gotator -sub ./$domain/subdomain/all_subdomain.txt -perm $PERMUTATIONS_WORDLIST -depth 1 -numbers 10 -mindup -adv -md -t $GOTATOR_THREADS -silent | anew -q ./$domain/subdomain/gotator_subdomains.txt
    puredns resolve ./$domain/subdomain/gotator_subdomains.txt -r $DNSVALIDATOR_RESOLVERS | anew -q ./$domain/subdomain/gotator_resolve_subdomain.txt
}


subtakeover(){
    subjack -w ./$domain/subdomain/all_subdomain.txt -t $threads -timeout 30 -o ./$domain/subdomain-takeover/subjack.txt -ssl -c /root/go/pkg/mod/github.com/haccer/subjack@v0.0.0-20201112041112-49c51e57deab/fingerprints.json
    # dig $domain
}


s3buckets(){
    s3scanner --threads 100 scan -f ./$domain/alive-subdomain/protoless_all_alive_subs.txt | anew -q ./$domain/buckets/s3scanner.txt
    for i in $(cat ./$domain/buckets/s3scanner.txt); do aws s3 ls s3://$i; done;


    keyword=${domain%%.*}
    python3 ~/tools/cloud_enum/cloud_enum.py -k $keyword -qs -t $CLOUD_ENUM_THREADS -l cloud_enum.txt

    python3 ~/tools/s3brute-master/amazon-s3-enum.py -w ~/tools/s3brute-master/BucketNames.txt -d $domain
    ./slurp-linux-amd64 domain --domain $TARGET | anew -q ./$domain/buckets/slurp.txt

    python3 gcpbucketbrute.py -k $domain -u
}


enum_ips(){
    massdns -r $MASSDNS_RESOLVERS -q -t A -o S -w ./$domain/subdomain/all_subdomain.txt ./$domain/ips/massdns.raw
    cat ./$domain/ips/massdns.raw | grep -e ' A ' |  cut -d 'A' -f 2 | tr -d ' ' | anew -q ./$domain/ips/resolved_ips.txt

    # Removing Unnecassery files
    rm -rf ./$domain/ips/massdns.raw
}


filter_ip(){
    cloudflare="173.245.48.0/20 103.21.244.0/22 103.22.200.0/22 103.31.4.0/22 141.101.64.0/18 108.162.192.0/18 190.93.240.0/20 188.114.96.0/20 197.234.240.0/22 198.41.128.0/17 162.158.0.0/15 104.16.0.0/12 172.64.0.0/13 131.0.72.0/22"
    for ip in $(cat ./$domain/ips/resolved_ips.txt); do
    echo $ip | grepcidr "$cloudflare" >/dev/null && echo "${red} [!] $ip is protected by Cloudflare ${reset}" || echo "$ip" | anew -q ./$domain/ips/afterremovecloudflare.txt
    done

    incapsula="199.83.128.0/21 198.143.32.0/19 149.126.72.0/21 103.28.248.0/22 45.64.64.0/22 185.11.124.0/22 192.230.64.0/18 107.154.0.0/16 45.60.0.0/16 45.223.0.0/16"
    for ip in $(cat ./$domain/ips/afterremovecloudflare.txt); do
    echo $ip | grepcidr "$incapsula" >/dev/null && echo "${red} [!] $ip is protected by Incapsula ${reset}" || echo "$ip" | anew -q ./$domain/ips/afterremoveincapsula.txt
    done

    sucuri="185.93.228.0/24 185.93.229.0/24 185.93.230.0/24 185.93.231.0/24 192.124.249.0/24 192.161.0.0/24 192.88.134.0/24 192.88.135.0/24 193.19.224.0/24 193.19.225.0/24 66.248.200.0/24 66.248.201.0/24 66.248.202.0/24 66.248.203.0/24"
    for ip in $(cat ./$domain/ips/afterremoveincapsula.txt); do
    echo $ip | grepcidr "$sucuri" >/dev/null && echo "${red} [!] $ip is protected by Sucuri ${reset}" || echo "$ip" | anew -q ./$domain/ips/afterremovesucuri.txt
    done

    akamai="104.101.221.0/24 184.51.125.0/24 184.51.154.0/24 184.51.157.0/24 184.51.33.0/24 2.16.36.0/24 2.16.37.0/24 2.22.226.0/24 2.22.227.0/24 2.22.60.0/24 23.15.12.0/24 23.15.13.0/24 23.209.105.0/24 23.62.225.0/24 23.74.29.0/24 23.79.224.0/24 23.79.225.0/24 23.79.226.0/24 23.79.227.0/24 23.79.229.0/24 23.79.230.0/24 23.79.231.0/24 23.79.232.0/24 23.79.233.0/24 23.79.235.0/24 23.79.237.0/24 23.79.238.0/24 23.79.239.0/24 63.208.195.0/24 72.246.0.0/24 72.246.1.0/24 72.246.116.0/24 72.246.199.0/24 72.246.2.0/24 72.247.150.0/24 72.247.151.0/24 72.247.216.0/24 72.247.44.0/24 72.247.45.0/24 80.67.64.0/24 80.67.65.0/24 80.67.70.0/24 80.67.73.0/24 88.221.208.0/24 88.221.209.0/24 96.6.114.0/24"
    for ip in $(cat ./$domain/ips/afterremovesucuri.txt); do
    echo $ip | grepcidr "$akamai" >/dev/null && echo "${red} [!] $ip is protected by Akamai ${reset}" || echo "$ip" | anew -q ./$domain/ips/all_ips.txt
    done

    # Removing Unnecassery files
    rm -rf ./$domain/ips/afterremovecloudflare.txt ./$domain/ips/afterremoveincapsula.txt ./$domain/ips/afterremovesucuri.txt
}


portscan(){
    masscan -p1-65535 -iL final-ips.txt --max-rate 10000 -oG $TARGET_OUTPUT
    naabu -l final-ips.txt -p $PORTS -c $THREADS -silent | anew -q ./$domain/ports/ports.txt
}


cred_brute(){
    python3 brutespray.py --file nmap.gnmap -U /usr/share/wordlist/user.txt -P /usr/share/wordlist/pass.txt --threads 5 --hosts 5
}

sub_alive(){
    cat ./$domain/subdomain/all_subdomain.txt | httpx -follow-host-redirects -random-agent -status-code -silent -retries 2 -title -web-server -tech-detect -location -fc 404,502 -t $HTTPX_THREADS -o ./$domain/alive-subdomain/httpx_webs_info.txt
    cat ./$domain/alive-subdomain/httpx_webs_info.txt | awk '{print $1}' | anew -q ./$domain/alive-subdomain/all_alive.txt

    #remove http
    cat ./$domain/alive-subdomain/all_alive.txt | sed 's/http\(.?*\)*:\/\///g' | anew -q ./$domain/alive-subdomain/protoless_all_alive_subs.txt
}


screenshot(){
    gowitness file -f ./$domain/alive-subdomain/all_alive.txt -t $GOWITNESS_THREADS --disable-logging -P ./$domain/visual-recon/gowitness
    mv gowitness.sqlite3 ./$domain/visual-recon/gowitness
    # gowitness report serve -D gowitness.sqlite3 > /dev/null 2>&1 & # Don't Change Command
}


favicon(){
# sdf
}


waf_checks(){
    wafw00f -i ./$domain/alive-subdomain/protoless_all_alive_subs.txt -o ./$domain/wafw00f.txt
    cat ./$domain/wafw00f.txt | sed -e 's/^[ \t]*//' -e 's/ \+ /\t/g' -e '/(None)/d' | tr -s "\t" ";" > ./$domain/webs_wafs.txt
}


fuzz(){
    gobuster dir -k -t $gobuster_threads -w $gobuster_wordlists -u https://$domain -o ./$domain/gobuster.txt
    ffuf -w $fuzzdb_wordlists -u https://$domain/FUZZ -mc 200 all -fs 42 -c -v -t 100 | grep "| URL |" | awk '{print $4}' | anew -q ./$domain/ffuf.txt

    for url in $(cat /home/ubuntu/Desktop/findom-xss/httprobe.txt); do
    reg=$(echo $url | sed -e 's;https\?://;;' | sed -e 's;/.*$;;')
    feroxbuster --url $url -w /usr/local/lib/python3.10/dist-packages/passwordmeter/res/common.txt -x php asp aspx jsp py txt conf config bak backup swp old db zip sql --depth 3 --threads 300 --output ./content_discovery_result.txt
    done
}


cms_scanner(){
    tr '\n' ',' < ./$domain/alive-subdomain/all_alive.txt > cms.txt
    timeout -k 30 $CMSSCAN_TIMEOUT python3 $tools/CMSeeK/cmseek.py -l cms.txt --batch -r | anew -q cms.txt
}


url_checks(){
    cat ./$domain/alive-subdomain/all_alive.txt | gau | wordlistgen | anew -q ./$domain/content-discovery/gau_historical.txt
    cat ./$domain/alive-subdomain/all_alive.txt | waybackurls | anew -q ./$domain/content-discovery/waybackurls.txt
    cat ./$domain/alive-subdomain/all_alive.txt | hakrawler -u -d 5 -t $hakrawler_threads | anew -q ./$domain/content-discovery/hakrawler.txt
    cat ./$domain/alive-subdomain/all_alive.txt | gau --blacklist eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,svg,txt --retries 3 --threads $gau_threads | anew -q ./$domain/content-discovery/gau.txt
    github-endpoints -q -k -d $domain -t $GITHUB_TOKENS -o ./$domain/github-endpoints.txt
    # python3 crawler.py -d https://$domain -l 3
    # python cc.py -d $domain
    # gauplus

    cat ./$domain/content-discovery/gospider_urls.txt | grep -aEo 'https://[^ ]+' | grep "=" | uro | anew -q gospider_endpoints.txt

    python3 ~/tools/robotScraper/robotScraper.py -d $domain -s ./$domain/content-discovery/robotScraper.txt
    # curl -sX GET "https://index.commoncrawl.org/CC-MAIN-2022-27-index?url=*.$domain&output=json" | jq -r .url | egrep -v "null"

    # merge urls
    cat ./$domain/contentdiscovery/*.txt | anew -q ./$domain/content-discovery/all_urls.txt

    # Removing Unnecassery files
    rm -rf ./$domain/subdomain/gospider_subdomains.txt
}


gf_url(){
    cat  ./$domain/content-discovery/all_urls.txt | gf cors | anew -q ./$domain/gf-patterns/cors.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf aws-keys | anew -q ./$domain/gf-patterns/aws-keys.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf base64 | anew -q ./$domain/gf-patterns/base64.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf s3-buckets | anew -q ./$domain/gf-patterns/s3-buckets.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf idor | anew -q ./$domain/gf-patterns/idor.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf lfi | anew -q ./$domain/gf-patterns/lfi.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf rce | anew -q ./$domain/gf-patterns/rce.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf redirect | anew -q ./$domain/gf-patterns/redirct.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf sqli | anew -q ./$domain/gf-patterns/sqli.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf ssrf | anew -q ./$domain/gf-patterns/ssrf.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf ssti | anew -q ./$domain/gf-patterns/ssti.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf interestingparams | anew -q ./$domain/gf-patterns/interesting_parameters.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf interestingsubs | anew -q ./$domain/gf-patterns/interesting_subs.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf xss | anew -q ./$domain/gf-patterns/xss.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf interestingEXT | anew -q ./$domain/gf-patterns/interesting_extensions.txt
    cat  ./$domain/content-discovery/all_urls.txt | gf debug_logic | anew -q ./$domain/gf-patterns/debug_logic.txt
}


nuclei_check(){
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/cves/ -c 200 -o ./$domain/nuclei/nuclei_cves.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/file/ -c 200 -o ./$domain/nuclei/nuclei_files.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/vulnerabilities/ -c 200 -o ./$domain/nuclei/nuclei_vulnerabilities.txt  
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/dns/ -c 200 -o ./$domain/nuclei/nuclei_dns.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/misconfiguration -c 200 -o ./$domain/nuclei/nuclei_misconfiguration.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/takeovers/ -c 200 -o ./$domain/nuclei/nuclei_takeovers.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/technologies/ -c 200 -o ./$domain/nuclei/nuclei_technologies.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/token-spray/ -c 200 -o ./$domain/nuclei/nuclei_token-spray.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/exposures/tokens/ -c 200 -o ./$domain/nuclei/nuclei_token.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/miscellaneous/ -c 200 -o ./$domain/nuclei/nuclei_miscellaneous.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/default-logins/ -c 200 -o ./$domain/nuclei/nuclei_default-logins.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/exposed-panels/ -c 200 -o ./$domain/nuclei/nuclei_exposed-panels.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/exposures/ -c 200 -o ./$domain/nuclei/nuclei_exposures.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/fuzzing/ -c 200 -o ./$domain/nuclei/nuclei_fuzzing.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/headless/ -c 200 -o ./$domain/nuclei/nuclei_headless.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/helpers/ -c 200 -o ./$domain/nuclei/nuclei_helpers.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/iot/ -c 200 -o ./$domain/nuclei/nuclei_iot.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/network/ -c 200 -o ./$domain/nuclei/nuclei_network.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/ssl/ -c 200 -o ./$domain/nuclei/nuclei_ssl.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/workflows/ -c 200 -o ./$domain/nuclei/nuclei_workflows.txt
    nuclei -l ./$domain/content-discovery/all_urls.txt -t ~/nuclei-templates/cnvd/ -c 200 -o ./$domain/nuclei/nuclei_cnvd.txt
}


jschecks(){
    cat ./$domain/content-discovery/gospider_urls.txt | grep -aEo 'https://[^ ]+' | grep "\.js" | tr -d ']' | anew -q ./$domain/content-discovery/gospider_js.txt
    cat ./$domain/content-discovery/gospider_js.txt | python3 jsa.py | anew -q .tmp/url_extract_tmp.txt


    cat ./$domain/content-discovery/all_urls.txt | grep "\.js" | anew -q ./$domain/js-files/js-urls.txt
    # cat ./$domain/js-files/js-urls.txt | parallel -j50 -q curl -w 'Status:%{http_code}\t Size:%{size_download}\t %{url_effective}\n' -o /dev/null -sk | grep Status:200

    # python3 ~/tools/SecretFinder/SecretFinder.py --input ./$domain/js-files/js.txt -o ./$domain/js-files/secrefinder.txt
    # python3 ~/tools/jsearch/jsearch.py --u https://$1 -n starbucks | anew -q ./$domain/jsearch.txt
    # python3 ~/tools/xnLinkFinder/xnLinkFinder.py -i tesla.com -v -d 2 -sp https://www.tesla.com

    # getJS

    # jsparser
    for urls in $(cat ./$domain/js-urls.txt); do
        python3 ~/tools/LinkFinder/linkfinder.py -i $urls -o ./$domain/js-files/linkfinder.txt
    done

    cat ./$domain/content-discovery/all_urls.txt | grep -iE "\.js$" | httpx -silent | anew -q ./$domain/js-files/mixed_js_links.txt
    cat ./$domain/alive-subdomain/all_alive.txt | httpx -silent | subjs | anew -q ./$domain/js-files/subjs.txt
    cat js/url_extract_js.txt | subjs -ua "Mozilla/5.0 (X11; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0" -c 40 | grep "$domain" | anew -q .tmp/subjslinks.txt

    # merge js urls
    cat ./$domain/js-files/*.txt | anew -q ./$domain/js-files/final_js.txt
}


wordlist_gen(){
    cat ./$domain/content-discovery/all_urls.txt | unfurl -u keys | sed 's/[][]//g' | sed 's/[#]//g' | sed 's/[}{]//g' | anew -q webs/dict_params.txt
    cat ./$domain/content-discovery/all_urls.txt | unfurl -u values | sed 's/[][]//g' | sed 's/[#]//g' | sed 's/[}{]//g' | anew -q webs/dict_values.txt

    # cewl $domain -d 2 -m 5 -w docswords.txt
    # cewl $domain -n -e -w emails.txt
}

password_dict(){
    word=${domain%%.*}
    python3 $tools/pydictor/pydictor.py -extend $word --leet 0 1 2 11 21 --len ${PASSWORD_MIN_LENGTH} ${PASSWORD_MAX_LENGTH} -o webs/password_dict.txt
}


params(){
    for url in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    python3 ~/tools/ParamSpider/paramspider.py -d $url -o ./$domain/parameters/paramspider_parameters.txt
    done

    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    arjun -u $urls -oT ./$domain/parameters/arjun_parameters.txt
    done

    # python3 parameth.py -u http://testphp.vulnweb.com/test.php
}



###############################################################################################################
######################################### VULNERABILITIES #####################################################
###############################################################################################################


broken_links(){
    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    blc $urls -ro | grep "BROKEN" | awk '{print $2}' | anew -q broken_links.txt
    done
}

xss(){
    # xsshunter

    # Blind xss framework
    # ezXSS
    # bXSS
}


cors(){
    corscanner -v -t $threads -i ./$domain/gf-patterns/cors.txt | anew -q ./$domain/vulnerabilities/corscanner.txt
    python3 ~/tools/Corsy/corsy.py -i urls.txt -t $CORSY_THREADS -o ./$domain/vulnerabilities/corsy.txt
}


open_redirect(){
    cat gf/redirect.txt | qsreplace FUZZ | sed '/FUZZ/!d' | anew -q .tmp/tmp_redirect.txt
    python3 $tools/Oralyzer/oralyzer.py -l .tmp/tmp_redirect.txt -p $tools/Oralyzer/payloads.txt > vulns/redirect.txt
    sed -r -i "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" vulns/redirect.txt
}


ssrf_checks(){
    # ddfsd
}


crlf_checks(){
    crlfuzz -l ./$domain/alive-subdomain/all_alive.txt -c 50 -s -o crlfuzz.txt
}


lfi(){
    cat gf/lfi.txt | qsreplace FUZZ | sed '/FUZZ/!d' | anew -q .tmp/tmp_lfi.txt
}


ssti(){
    cat gf/ssti.txt | qsreplace FUZZ | sed '/FUZZ/!d'  | anew -q .tmp/tmp_ssti.txt
}


sqli(){
    cat gf/sqli.txt | qsreplace FUZZ | sed '/FUZZ/!d' | anew -q .tmp/tmp_sqli.txt
    sqlmap -m .tmp/tmp_sqli.txt -b -o --smart --batch --disable-coloring --random-agent --output-dir=vulns/sqlmap
}

test_ssl(){
    ~/tools/testssl.sh/testssl.sh --quiet --color 0 -U -iL hosts/ips.txt | anew -q vulns/testssl.txt
}


command_injection(){
    cat gf/rce.txt | qsreplace FUZZ | sed '/FUZZ/!d'  | anew -q .tmp/tmp_rce.txt
    python3 $tools/commix/commix.py --batch -m .tmp/tmp_rce.txt --output-dir vulns/command_injection.txt
}


prototype_pollution(){
    ppfuzz -l webs/url_extract.txt -c $PPFUZZ_THREADS | anew -q .tmp/prototype_pollution.txt
    cat .tmp/prototype_pollution.txt | sed -e '1,8d' | sed '/^\[ERR/d' | anew -q vulns/prototype_pollution.txt
}

vulnerabilities(){
    python3 ~/tools/shcheck/shcheck.py https://$domain | grep 'Missing security header:\|There are\|--' | anew -q ./$domain/vulnerabilities/headers.txt
}


csrfscan(){
    python3 ~/tools/Bolt/bolt.py -u $domain -l 2 | anew -q ./$domain/vulnerabilities/bolt.txt
}


cve_misconfigs(){
    cat ./$domain/alive-subdomain/all_alive.txt | gofingerprint -fingerprints ./fingerprints.json
    # sniper
    # jaeles
    # Vulners
    # retire.js
    # Intrigue Core
}


cms_checks(){
    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    wpscan --url $urls | anew -q ./$domain/cms-vulnerabilities/cms-vulnerabilities/wpscan.txt
    done

    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    perl joomscan.pl -u $urls | anew -q ./$domain/cms-vulnerabilities/joomscan.txt
    done

    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    python3 droopescan scan drupal -u $urls -t 32 | anew -q ./$domain/cms-vulnerabilities/droopescan.txt
    done

    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    python aem_hacker.py -u $urls --host <your public ip> | anew -q ./$domain/cms-vulnerabilities/droopescan.txt
    done
}


#SEND TO BURPSUITE
sendburp(){
    cat ./$domain/content-discovery/all_urls.txt |  parallel -j50 -q curl -x http://127.0.0.1:8080 -w 'Status:%{http_code}\t Size:%{size_download}\t %{url_effective}\n' -o /dev/null -sk
}


Rapid7_FDNS(){
    cat 2022-08-05-1659658263-fdns_a.json.gz | pigz -dc | grep ".target.org" | jq`
}

osint(){
    dig $domain txt | egrep -i 'spf|DMARC|dkim' | anew -q ./$domain/osint-info/email.txt
    dig iport._domainkey.${domain} txt | egrep -i 'spf|DMARC|DKIM' | anew -q ./$domain/osint-info/email.txt
    dig _dmarc.${domain} txt | egrep -i 'spf|DMARC|DKIM' | anew -q ./$domain/osint-info/email.txt

    curl -s https://www.ultratools.com/tools/ipWhoisLookupResult\?ipAddress\=$domain | grep -A2 label | grep -v input | grep span | cut -d">" -f2 | cut -d"<" -f1 | sed 's/\&nbsp\;//g' | anew -q ./$domain/osint-info/ultratools.txt
    wget -q http://www.intodns.com/$domain -O ./$domain/osint-info/intodns.html
    curl -s https://www.email-format.com/d/$domain| grep @$domain | grep -v div | sed "s/\t//g" | sed "s/ //g" | anew -q ./$domain/osint-info/email-format.txt
    urlcrazy $domain | anew -q $domain/osint-info/urlcrazy.txt
    # python metagoofil.py -d $domain -t doc,pdf,xls,csv,txt -l 25 -n 25 -o $LOOT_DIR/osint/ -f ./$domain/osint-info/$domain.html | anew -q ./$domain/osint-info/metagoofil.txt
    curl --insecure -L -s "https://urlscan.io/api/v1/search/?q=domain:$domain" | egrep "country|server|domain|ip|asn|$domain|prt"| anew -q ./$domain/osint-info/urlscanio.txt
    curl -s "https://api.hunter.io/v2/domain-search?domain=$domain&api_key=$HUNTERIO_KEY" | egrep "name|value|domain|company|uri|position|phone" | anew -q ./$domain/osint-info/hunterio.txt
    msfconsole -x "use auxiliary/gather/search_email_collector; set DOMAIN $domain; run; exit y" | anew -q ./$domain/osint-info/msf-emails.txt
}


recon(){
    spyse -target $domain --subdomains | grep $domain | anew -q ./$domain/spyse.txt
    python ~/tools/censys-subdomain-finder/censys_subdomain_finder.py --censys-api-id $censys_app_id --censys-api-secret $censys_api_secret $domain | egrep "\-" | awk '{print $2}' | egrep -v "Searching|Found" | anew -q ./$domain/censys.txt

    shodan search "hostname:*.$domain" | anew -q ./$domain/domains/shodan.txt 2> /dev/null 
    awk '{print $3}' ./$domain/domains/shodan.txt 2> /dev/null | grep -v "\;" > ./$domain/domains/shodan-sorted.txt 2> /dev/null
    awk '{print $1}' ./$domain/domains/shodan.txt 2> /dev/null >> ./$domain/ips/ips-all-unsorted.txt 2>/dev/null
}


whois_info(){
    nslookup $domain | anew -q nslookup.txt
    python3 ~/tools/Asnlookup/asnlookup.py -o $company | anew -q asn.txt
    asnip -t $domain | anew -q ./$domain/ips/asn-$domain.txt
    python3 ~/tools/ssl-checker/ssl_checker.py -H $domainName | anew -q ssl.txt
    curl -s -L --data "ip=$domain" https://2ip.me/en/services/information-service/provider-ip\?a\=act | grep -o -E '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}'

}

google_dorks(){
    python3 ~tools/dorks_hunter/dorks_hunter.py -d $domain -o osint/dorks.txt
}


github_dorks(){
    python3 ~/tools/GitDorker/GitDorker.py -t $github_token -d ~/tools/GitDorker/Dorks/alldorksv3 -q $domain
    gitdorks_go -gd $tools/gitdorks_go/Dorks/medium_dorks.txt -nws 20 -target $domain -tf "${GITHUB_TOKENS}" -ew 3 | anew -q osint/gitdorks.txt
}


emails(){
    python3 theHarvester.py -d $domain -b all -f ./$domain/osint-info/harvester.json
    cat ./$domain/osint-info/harvester.json | jq -r 'try .emails[]' | anew -q ./$domain/osint-info/emails.txt
    cat ./$domain/osint-info/harvester.json | jq -r 'try .linkedin_people[]' | anew -q ./$domain/osint-info/employees.txt
    cat ./$domain/osint-info/harvester.json | jq -r 'try .linkedin_links[]' | anew -q ./$domain/osint-info/linkedin.txt

    h8mail -t $domain -q domain --loose -c $tools/h8mail_config.ini -j ./$domain/osint-info/h8_results.json
    cat ./$domain/osint-info/h8_results.json | jq -r '.targets[0] | .data[] | .[]' | awk '{print $12}' | anew -q ./$domain/osint-info/h8mail.txt

    ~/tools/EmailFinder/./email_finder.sh $domain | anew -q ./$domain/osint-info/email_finder_emails.txt
    ~/tools/EmailFinder/./email_finder.sh $domain | cut -f1 -d"@" | anew -q ./$domain/osint-info/email_finder_keys.txt

    # Removing Unnecassery files
    rm -rf ./$domain/osint-info/harvester.json ./$domain/osint-info/h8_results.json
}

domain_info(){
    whois -H $domain | grep 'Domain\|Registry\|Registrar\|Updated\|Creation\|Registrant\|Name Server\|DNSSEC:\|Status\|Whois Server\|Admin\|Tech' | grep -v 'the Data in VeriSign Global Registry' | anew -q ./$domain/osint-info/whois_domain_info.txt
    amass intel -whois -d $domain | anew -q ./$domain/amass_reverse-whois.txt
}


technologies(){
    whatweb -i ./$domain/alive-subdomain/all_alive.txt | anew -q ./$domain/technologies/whatweb.txt
    
    for urls in $(cat ./$domain/alive-subdomain/all_alive.txt); do
    python3 main.py analyze -u $urls | anew -q ./$domain/technologies/wappylyzer.txt
    done
}


hackertarget(){
    curl -s GET "https://api.hackertarget.com/pagelinks/?q=https://$domain" | egrep -v "API count|no links found|input url is invalid|API count|no links found|input url is invalid" | anew -q hackertarget-webste-info.txt
}

###############################################################################################################
################################################### OPTIONS ###################################################
###############################################################################################################


all(){
    subpassive
    subactive
    subtakeover
    enumips
    portscan
    subfilter
    visualrecon
    webcrawl
    gfurl
    wafchecks
    nuclscan
    jschecks
    wordlistgen
}

osint(){
    domain_info
    ip_info
    emails
    google_dorks
    github_dorks
    metadata
    favicon
}


vulns(){
    cors
    open_redirect
    ssrf_checks
    crlf_checks
    lfi
    ssti
    sqli
    xss
    command_injection
    prototype_pollution
    spraying
    brokenLinks
    test_ssl
}


###############################################################################################################
###############################################  START SCRIPT  ################################################
###############################################################################################################


while [ -n "$1" ]; do
    case $1 in
        -d|--domain)
            domain=$2
            shift ;;

        -f|--fullscan)
            fullscan
            shift ;;

        -p|--passive)
            subpassive
            shift ;;

        -a|--active)
            subactive
            shift ;;

        -s|--subtakeover)
            subtakeover
            shift ;;

        -o|--output)
            out=$2
            shift ;;

        -s|--silent)
            silent=True ;;

        -t|--thread)
            thread=$2
            shift ;;

        -i|--enumips)
            enumips
            shift ;;

        -P|--portscan)
            portscan
            shift ;;

        -S|--subfilter)
            subfilter
            shift ;;

        -v|--visualrecon)
            visualrecon
            shift ;;

        -c|--crawl)
            crawl
            shift ;;

        -g|--gfurl)
            gfurl
            shift ;;

        -w|--wafchecks)
            wafchecks
            shift ;;

        -n|--nuclscan)
            nuclscan
            shift ;;

        -j|--jschecks)
            jschecks
            shift ;;

        -W|--wordlistgen)
            wordlistgen
            shift ;;

        -mxss)
            massxss
            shift ;;

        -v|--version)
            echo "Version: $VERSION"
            exit 0 ;;

        -h|--help)
            showhelp
            exit 1 ;;
    esac
done